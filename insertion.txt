a) Arrange list of students alphabetically. (Use Insertion sort)


#include <iostream>
#include <string>

using namespace std;

// Define the structure for a student
struct Student {
    int rollNo;
    string name;
    float sgpa;
};

// Function to perform Insertion Sort on an array of students based on their names
void insertionSort(Student arr[], int n) {
    int i, j;
    Student key;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        // Move elements of arr[0..i-1] that are greater than key.name
        // to one position ahead of their current position
        while (j >= 0 && arr[j].name > key.name) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int main() {
    const int numStudents = 15;

    // Create an array of students
    Student studentArray[numStudents] = {
        {101, "John", 3.5},
        {102, "Alice", 3.2},
        // Add more students...

        {115, "Zoe", 3.7}
    };

    // Perform Insertion Sort to arrange students alphabetically
    insertionSort(studentArray, numStudents);

    // Display the sorted list of students
    cout << "Sorted List of Students:\n";
    cout << "Roll No\tName\tSGPA\n";
    for (int i = 0; i < numStudents; i++) {
        cout << studentArray[i].rollNo << "\t" << studentArray[i].name << "\t" << studentArray[i].sgpa << "\n";
    }

    return 0;
}


b) Search a particular student according to name using binary search without
recursion. (all the student records having the presence of search key should be
displayed)

#include <iostream>
#include <string>

using namespace std;

// Define the structure for a student
struct Student {
    int rollNo;
    string name;
    float sgpa;
};

// Function to perform binary search for a student by name
void binarySearchByName(Student arr[], int n, const string& searchKey) {
    int low = 0, high = n - 1;

    while (low <= high) {
        int mid = (low + high) / 2;

        // Check if the search key is present at the middle
        if (arr[mid].name == searchKey) {
            // Display all students with the matching name
            cout << "Student(s) with the name '" << searchKey << "':\n";
            while (mid >= 0 && arr[mid].name == searchKey) {
                cout << "Roll No: " << arr[mid].rollNo << "\tName: " << arr[mid].name << "\tSGPA: " << arr[mid].sgpa << "\n";
                mid--;
            }
            return;
        }

        // If the search key is greater, ignore the left half
        else if (arr[mid].name < searchKey)
            low = mid + 1;

        // If the search key is smaller, ignore the right half
        else
            high = mid - 1;
    }

    // If the search key is not present in the array
    cout << "Student with the name '" << searchKey << "' not found.\n";
}

int main() {
    const int numStudents = 15;

    // Create an array of students (assuming it is sorted by name for binary search)
    Student studentArray[numStudents] = {
        {101, "Alice", 3.5},
        {102, "Bob", 3.2},
        {103, "Charlie", 3.7},
        // Add more students...

        {115, "Zoe", 3.9}
    };

    // Search for a student by name
    string searchName;
    cout << "Enter the name of the student to search: ";
    getline(cin, searchName);

    // Perform binary search by name
    binarySearchByName(studentArray, numStudents, searchName);

    return 0;
}

